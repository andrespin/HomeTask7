package Block1;



import java.util.Random;

/*

Блок условий номер №1

1. Расширить задачу про котов и тарелки с едой.
2. Сделать так, чтобы в тарелке с едой не могло получиться отрицательного количества еды
(например, в миске 10 еды, а кот пытается покушать 15-20).
3. Каждому коту нужно добавить поле сытость (когда создаем котов, они голодны). Если коту
удалось покушать (хватило еды), сытость = true.
4. Считаем, что если коту мало еды в тарелке, то он её просто не трогает, то есть не может быть
наполовину сыт ( это сделано для упрощения логики программы ).
5. Создать массив котов и тарелку с едой, попросить всех котов покушать из этой тарелки и
потом вывести информацию о сытости котов в консоль.
6. Добавить в тарелку метод, с помощью которого можно было бы добавлять еду в тарелку.
 */


/*
В первую очередь проверяю:
1. Проверки на то, чтоб коты не могли загнать значение еды в тарелке в минус
2. Как реализован механизм сытости кота, какие условия расставлены в методе eat().
Кот ест столько, сколько дали. Шкала еды при этом двигается на n позиций
3. Как и где вы создаете массив котов. Как вы их кормите
*/

/*

Блок условий номер №2

Дополнительно:
4. Создан ли массив тарелок
5. Кот поедает все, что найдет (со всех тарелок, где есть еда)
Учитываем, что у нас воспитанные коты, и подходят к мискам они в порядке очереди
6. Как добавляется еда в тарелки (можно через 1 метод, который автоматически раскидает по всем мискам)
7*** Реализован ли класс-посредник между котами и тарелками. Через него довольно просто можно оповещать котов о том, что пошуршали пакетом еды и рассыпали по мискам
 */


public class Main {


    public static void main (String [] args) {

            Cat[] cats = new Cat[]
                    {
                    new Cat ( "Barsik" , 200 ),
                    new Cat ( "Vasilii" , 200 ),
                    new Cat ( "Robert" , 200 ),
                    new Cat ( "Jingo" , 200 ),
                    new Cat ( "Leonard" , 200 )
                    };

            Plate plate = new Plate( 800);


            plate.info();

            // дать котам поесть из тарелки (останутся и голодные коты)
            GiveFoodToCats(cats,plate);

            plate.info();

            // определить кто сыт, а кто нет
            CheckSatiety(cats);


            plate.increaseFood(800);

            plate.info();

       //     Plate[] plates = new Plate[] {new Plate(300), new Plate(500)} ;

    }

    // Предложить котам еду (не всем котам её хватит)
    private static void GiveFoodToCats(Cat [] cats, Plate plate)
    {

        int count = 0;
        int [] numbs = new int[cats.length];


        for (int i = 0; i < numbs.length; i++) {
            numbs[i] = -1;
        }

        while(count != cats.length)
        {
            int numb = new Random().nextInt(cats.length);
            if (!find(numbs, numb))
            {
                numbs [count] = numb;
                cats[numb].eat(plate);
                count++;
            }
        }

    }


    // Выяснить кто из котов сытый, а кто нет и вывести на экран
    private static void CheckSatiety(Cat [] cats)
    {

        for (int i = 0; i < cats.length; i++) {
            System.out.println( "Кот " +cats[i].getName()+ " наелся : " + cats[i].isSatiety());
        }

    }

    private static boolean find(int [] numbs, int numb)
    {
        for (int i = 0; i < numbs.length; i++ )
        {
            if (numbs[i] == numb)
            {
                return true;
            }
        }
        return false;
    }

}